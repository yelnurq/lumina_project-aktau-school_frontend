import { useState } from "react";
import styles from "./ReportGenerator.module.css";
import { Link } from "react-router-dom";

export default function ReportGenerator() {
  const [url, setUrl] = useState("");
  const [report, setReport] = useState("");

  const handleGenerate = async () => {
    if (!url) {
      setReport("‚ùå –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞!");
      return;
    }

    try {
      const start = performance.now();
      const response = await fetch(url);
      const text = await response.text();
      const loadTime = ((performance.now() - start) / 1000).toFixed(2);

      const sizeKB = Math.round(new Blob([text]).size / 1024);
      const images = (text.match(/<img /g) || []).length;
      const metas = (text.match(/<meta /g) || []).length;

      const generated = `üìä –û—Ç—á—ë—Ç –ø–æ —Å–∞–π—Ç—É: ${url}

‚úÖ –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${loadTime}s
‚úÖ –†–∞–∑–º–µ—Ä HTML: ${sizeKB} KB
üñºÔ∏è –ö–æ–ª-–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫: ${images}
üîñ –ö–æ–ª-–≤–æ –º–µ—Ç–∞—Ç–µ–≥–æ–≤: ${metas}

SEO: ${metas > 3 ? "–•–æ—Ä–æ—à–æ" : "–ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å"}
      `;

      setReport(generated);
    } catch (e) {
      setReport("‚ö† –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∞–π—Ç");
    }
  };

  const handleDownload = () => {
    const blob = new Blob([report], { type: "text/plain" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = "report.txt";
    link.click();
  };

  return (
    <div className={styles.container}>
      <div className={styles.controls}>
        <input
          type="text"
          value={url}
          onChange={(e) => setUrl(e.target.value)}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞ (https://...)"
          className={styles.input}
        />
      </div>

      <div className={styles.buttonGroup}>
        <Link to="/" className={styles.actionButton}>‚¨Ö –î–æ–º–æ–π</Link>
        <button onClick={handleGenerate} className={styles.actionButton}>
          ‚ñ∂ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
        </button>
        {report && (
          <button onClick={handleDownload} className={styles.actionButton}>
            ‚¨á –°–∫–∞—á–∞—Ç—å TXT
          </button>
        )}
      </div>

      <div className={styles.preview}>
        <pre className={styles.textarea}>{report || "–û—Ç—á—ë—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å..."}</pre>
      </div>
    </div>
  );
}
